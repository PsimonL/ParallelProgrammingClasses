#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "mpi.h"

#define HOST_NAME_MAX 20

#define SCALAR double
// #define SCALAR float

#ifndef M_PI // standardy C99 i C11 nie wymagają definiowania stałej M_PI
#define M_PI (3.14159265358979323846)
#endif

int main(int argc, char **argv)
{

  int rank, ranksent, size, source, dest, tag, i;
  MPI_Status status;
  int max_liczba_wyrazow = 0;
  SCALAR sumPI = 0, pipart = 0;
  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  if (size > 1)
  {
    MPI_Barrier(MPI_COMM_WORLD);
    if (rank == 0)
    {
      dest = 0;
      tag = 0;
      printf("Podaj maksymalną liczbę wyrazów do obliczenia przybliżenia PI\n");

      scanf("%d", &max_liczba_wyrazow);
    }
    MPI_Bcast(&max_liczba_wyrazow, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Barrier(MPI_COMM_WORLD);
    if (rank != 0)
    {
      SCALAR suma_plus = 0.0;
      SCALAR suma_minus = 0.0;
      int i = 0;
      int blockSize = ceil(max_liczba_wyrazow / (size - 1));
      for (i = (rank - 1) * blockSize; i < rank * blockSize && i < max_liczba_wyrazow; i++)
      {
        int j = 1 + 4 * i;
        suma_plus += 1.0 / j;
        suma_minus += 1.0 / (j + 2.0);
        // printf("PI obliczone: %20.15lf, aktualna poprawka: %20.15lf\n",
        //   	 4*(suma_plus-suma_minus), 4.0/j-4.0/(j+2.0));
      }
      pipart = 4 * (suma_plus - suma_minus);
      printf("PI czesciowe: %20.15f,\n", pipart);
    }
    MPI_Reduce(&pipart, &sumPI, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    // Wynik tylko w root
    if (rank == 0)
    {
      printf("PI obliczone: \t \t \t %20.15lf\n ", sumPI);
      printf("PI z biblioteki matematycznej: \t %20.15lf\n ", M_PI);
    }

    MPI_Finalize();

    return 0;
  }
}